/*
  All-in-one setPWM
  This example shows how to configure a PWM with HardwareTimer in one single function call.
  PWM is generated on PD12 if available.
  No interruption callback used: PWM is generated by hardware.
  Once configured, there is no CPU load.

  
  Oscilloscope check: Probe on PD12 pins.

*/

/*
  Note: Please verify that 'pin' used for PWM has HardwareTimer capability for your board
  This is specially true for F1 serie (BluePill, ...)
*/

#define pin  PD12

TIM_TypeDef *Instance = (TIM_TypeDef *)pinmap_peripheral(digitalPinToPinName(pin), PinMap_PWM);

// Instantiate HardwareTimer object. Thanks to 'new' instantiation, HardwareTimer is not destructed when setup() function is finished.
HardwareTimer *MyTim = new HardwareTimer(Instance);
uint32_t channel = STM_PIN_CHANNEL(pinmap_function(digitalPinToPinName(pin), PinMap_PWM));

int duty = 0;

void setup()
{
  // Configure and start PWM
  // MyTim->setPWM(channel, pin, 5, 10, NULL, NULL); // No callback required, we can simplify the function call
  // MyTim->setPWM(channel, pin, 5, 10); // 5 Hertz, 10% dutycycle

  Serial.begin();
}


void loop()
{
  
      delay(1000);
      MyTim->setPWM(channel, pin, 100, duty); // 100 Hertz, duty% dutycycle
      Serial.print("PWM Duty Cycle: ");
      Serial.println(duty);
      
      duty = (duty + 10) ;
      if (duty > 100 )
        duty = 0;

        

}
